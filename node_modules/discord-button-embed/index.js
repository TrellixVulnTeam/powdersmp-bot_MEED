var _ = require("lodash"), version = require('discord.js').version.split('');
if (version.includes('(')) {
  version = version.join('').split('(').pop().split('');
}
version = parseInt(version[0] + version[1]);
const { Client, Structures } = require("discord.js");

const { MessageButton, MessageActionRow } = require("discord-buttons");
const styles = ["red", "green", "blurple", "grey"];


module.exports = (client) => {
  if (version != 12) throw new Error("'discord-button-embed' => The discord.js version must be v12");
  if (!client || !client instanceof Client) throw new Error("'discord-button-embed' => The discord.js client is not provided or is invalid.");

  class ExtendTextChannel extends Structures.get("TextChannel") {
    /**
     * @name page
     * @kind function
     * @param {String} author
     * @param {Object} options
     * @param {Array} [options.embeds]
     * @param {Object[]} [options.buttons]
     * @param {String} [options.buttons[].id]
     * @param {String} [options.buttons[].emoji]
     * @param {String} [options.buttons[].label]
     * @param {String} [options.buttons[].style]
     * @param {String} [options.buttons[].url]
     * @param {String|Number} [options.timeout]
     * @param {Boolean} [options.disable]
     * @param {Boolean} [options.onlyURL]
     * @author Nekoyasui <https://discord.com/users/817238971255488533>
     * @description pagination with buttons, URL buttons must be on the last index array.
     */
    async page(author, options = {}) {
      var { embeds, buttons, timeout = 300000, limit = 5, disable = false, onlyURL = false } = options;
      if (limit >= 5) limit = 5;
      if (!(Array.isArray(embeds) || Array.isArray(buttons))) throw new SyntaxError("'discord-button-embed' => Embeds and Buttons must be an Array typeof");
      if (!(embeds.length > 0 || buttons > 0)) throw new Error("'discord-button-embed' => Please provide embeds and buttons, URL buttons must be on the last index array.");
      //if (!(embeds.length === buttons.length)) throw new Error("'discord-button-embed' => Please provide same length array of embeds and buttons.");
      var Buttons = {};
      Buttons.enabled = [];
      Buttons.disabled = [];
      Buttons.url = [];
      Buttons.check = [];

      for (var i = 0; i < buttons.length; i++) {
        if (buttons[i] && !(buttons[i].style.toLowerCase() === "url" || buttons[i].url)) continue;
        if (!(buttons[i].label || buttons[i].emoji)) throw new Error(`'discord-button-embeds' => Please provide Label/Emoji for your button, (${buttons[i] ? `Button ID: ${buttons[i].id}` : `Array Index: ${i}`}).`);

        //check
        let check = {};
        check.id = "url" + i;
        check.url = true;
        check.index = null;
        Buttons.check.push(check);

        //url
        const url = new MessageButton();
        url.setStyle("url");
        url.setURL(buttons[i].url);
        if (buttons[i].label) url.setLabel(buttons[i].label);
        if (buttons[i].emoji) url.setEmoji(buttons[i].emoji);
        Buttons.url.push(url);
      }

      for (var i = 0; i < buttons.length; i++) {
        if (buttons[i] && (buttons[i].style.toLowerCase() === "url" || buttons[i].url)) continue;
        if (!buttons[i]) throw new Error(`'discord-button-embed' => Please provide Button for your embed, (Array Index: ${i}).`);
        if (!embeds[i]) throw new Error(`'discord-button-embed' => Please provide Embed for your button, (${buttons[i] ? `Button ID: ${buttons[i].id}` : `Array Index: ${i}`}).`);
        if (!(buttons[i].label || buttons[i].emoji)) throw new Error(`'discord-button-embeds' => Please provide Label/Emoji for your button, (${buttons[i] ? `Button ID: ${buttons[i].id}` : `Array Index: ${i}`}).`);
        if (!buttons[i].id) throw new Error("'discord-button-embed' => Please provide ID for your button.");
        //check
        let check = {};
        check.id = buttons[i].id;
        check.url = false;
        check.index = i;
        Buttons.check.push(check);

        //enabled
        const enabled = new MessageButton();
        if (styles.some((style) => style === buttons[i].style.toLowerCase())) {
          enabled.setStyle(buttons[i].style)
        } else {
          enabled.setStyle("grey")
        };
        if (buttons[i].label) enabled.setLabel(buttons[i].label);
        if (buttons[i].emoji) enabled.setEmoji(buttons[i].emoji);
        enabled.setID(buttons[i].id);
        Buttons.enabled.push(enabled);
      }

      for (var i = 0; i < buttons.length; i++) {
        if (buttons[i] && (buttons[i].style.toLowerCase() === "url" || buttons[i].url)) continue;
        if (!buttons[i]) throw new Error(`'discord-button-embed' => Please provide Button for your embed, (Array Index: ${i}).`);
        if (!embeds[i]) throw new Error(`'discord-button-embed' => Please provide Embed for your button, (${buttons[i] ? `Button ID: ${buttons[i].id}` : `Array Index: ${i}`}).`);
        if (!(buttons[i].label || buttons[i].emoji)) throw new Error(`'discord-button-embeds' => Please provide Label/Emoji for your button, (${buttons[i] ? `Button ID: ${buttons[i].id}` : `Array Index: ${i}`}).`);
        if (!buttons[i].id) throw new Error("'discord-button-embed' => Please provide ID for your button.");

        //disabled
        const disabled = new MessageButton();
        if (styles.some((style) => style === buttons[i].style.toLowerCase())) {
          disabled.setStyle(buttons[i].style)
        } else {
          disabled.setStyle("grey")
        };
        if (buttons[i].label) disabled.setLabel(buttons[i].label);
        if (buttons[i].emoji) disabled.setEmoji(buttons[i].emoji);
        disabled.setID(`${buttons[i].id}_disabled`);
        disabled.setDisabled();
        Buttons.disabled.push(disabled);
      }

      var Row = {};
      Row.limit = limit;
      Row.Disabled = [];
      Row.Enabled = [];

      var Comp = {};
      Comp.Enabled = _.chunk(Buttons.enabled, Row.limit);
      Comp.Disabled = _.chunk(Buttons.disabled, Row.limit);

      for (var i = 0; i < Comp.Enabled.length; i++) {
        const row = new MessageActionRow().addComponents(Comp.Enabled[i]);
        Row.Enabled = [...Row.Enabled, row];
      }

      for (var i = 0; i < Comp.Disabled.length; i++) {
        const row = new MessageActionRow().addComponents(Comp.Disabled[i]);
        Row.Disabled = [...Row.Disabled, row];
      }

      if (Buttons.url.length > 0) {
        Comp.URL = _.chunk(Buttons.url, Row.limit);
        for (var i = 0; i < Comp.URL.length; i++) {
          const row = new MessageActionRow().addComponents(Comp.URL[i]);
          Row.Enabled = [...Row.Enabled, row];
          Row.Disabled = [...Row.Disabled, row];
					Row.URL = row;
        }
      }

      this.send({
        embed: embeds[0],
        components: Row.Enabled
      }).then((message) => {
        const filter = (button) => button.clicker.user.id === author;
        const collector = message.createButtonCollector(filter, {
          time: timeout
        });

        collector.on("collect", button => {
					try { 	button.reply.defer(); }
					catch (e) { button.defer(); }

          const result = Buttons.check.find((x) => x.id == button.id);
          if (result && !result.url && !(result.index === null)) {
            client.emit("debug", `discord-button-embed => ID: ${result.id} | isURL: ${result.url} | Embed Index: ${result.index ? result.index : "No Embed"}`);
            message.edit("", {
              embed: embeds[result.index],
              components: Row.Enabled
            });
          } else {
            client.emit("debug", `discord-button-embed => No ID: ${button.id}\n${Buttons.check.map((x) => {
              return `ID: ${x.id} | isURL: ${x.url} | embed: ${x.embed ? x.embed : "No Embed"}`
            }).join("\n")}`);
          }
        });
        collector.on("end", () => {
          message.edit({
            embed: embeds[0],
            components: disable ? onlyURL ? Row.URL : Row.Disabled : null
          })
        });
        collector.on("error", (e) => {
          console.log(e);
        });
      })
    }
  };

  Structures.extend("TextChannel", () => ExtendTextChannel);
}